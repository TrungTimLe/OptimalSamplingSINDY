clear all, close all, clc
%% Generate Data
Beta = [10; 28; 8/3]; % Lorenz's parameters (chaotic)
n = 3; %number of state
x0 = [-8; 8; 27];  % Initial condition

% Integrate
dt = 0.01;
tspan = [dt:dt:5];
N = length(tspan);
options = odeset('RelTol',1e-12,'AbsTol',1e-12*ones(1,n));
[t,x]=ode45(@(t,x) lorenz(t,x,Beta),tspan,x0,options);

% Generate noisy data
noise_level = 0.5;
noisy_x = x + noise_level*randn(size(x,1),size(x,2));
%% Compute derivative using Total Variation Regularized Numerical Differentiation (TVDiff)
for i=1:length(x)
    ds_true(i,:) = lorenz(0,x(i,:),Beta);
end

for i=1:length(x)
    ds_noisy(i,:) = lorenz(0,noisy_x(i,:),Beta);
end
%% Number of iterations sensitivity
% n_iters = 10:20:100;
% RMSE_iter = size(n_iters,1);
% TVDiff_dx = zeros(length(n_iters),size(x,1)+1);
% for i = 1:length(n_iters)
%     TVDiff_dx(i,:) = TVRegDiff(noisy_x(:,1), n_iters(i), 0.2, [], 'small', 1e-6, 0.01, 0, 0);
%     RMSE_iter(i) = sqrt(mean((TVDiff_dx(i,1:end-1)'-ds_true(:,1)).^2));
% end
% % Validate estimated derivative
% figure,
% subplot(3,1,1)
% plot(x(:,1),'-','LineWidth',1.5)
% hold on
% plot(noisy_x(:,1),'LineWidth',0.5)
% legend('True x','Noisy x');
% xlabel('Time t','FontSize',12)
% ylabel('x','FontSize',12)
% 
% subplot(3,1,2)
% plot(ds_true(:,1),'LineWidth',1.5);
% hold on
% plot(ds_noisy(:,1),'--','LineWidth',0.5);
% for i = 1:length(n_iters)
%    plot(TVDiff_dx(i,1:end-1),'-','LineWidth',1); 
% end
% legend('True dx/dt','Noisy dx/dt',['TVDiff (iter = ' num2str(n_iters(1)) ')']...
%     ,['TVDiff (iter = ' num2str(n_iters(2)) ')'],['TVDiff (iter = ' num2str(n_iters(3)) ')'],...
%     ['TVDiff (iter = ' num2str(n_iters(4)) ')'],['TVDiff (iter = ' num2str(n_iters(5)) ')'])
% xlabel('Time t'),ylabel('dx/dt')
% 
% subplot(3,1,3)
% plot(n_iters,RMSE_iter,'-s','LineWidth',1.5)
% xlabel('Number of iterations','FontSize',12)
% ylabel('RMSE','FontSize',12)
%% alpha sensitivity
% level = 5;
% idx = (1:0.1:(level+1))-4;
% alpha = 10.^(idx); % Regularization parameter
% RMSE = size(alpha,1);
% N = length(alpha);
% TVDiff_dx = zeros(length(alpha),size(x,1)+1);
% for i = 1:N
%     TVDiff_dx(i,:) = TVRegDiff(noisy_x(:,1), 50, alpha(i), [], 'small', 1e-6, 0.01, 0, 0);
%     RMSE(i) = sqrt(mean((TVDiff_dx(i,1:end-1)'-ds_true(:,1)).^2));
% end
% % Validate estimated derivative
% figure,
% subplot(3,1,1)
% plot(x(:,1),'-','LineWidth',1.5)
% hold on
% plot(noisy_x(:,1),'LineWidth',0.5)
% title(['\eta = ' num2str(noise_level)])
% legend('True x','Noisy x');
% xlabel('Time t','FontSize',12)
% ylabel('x','FontSize',12)
% % Find the optimal value
% [M,I] = min(RMSE);
% subplot(3,1,2)
% plot(ds_true(:,1),'LineWidth',1.5);
% hold on
% plot(ds_noisy(:,1),'--','LineWidth',0.5);
% plot(TVDiff_dx(I,1:end-1),'-','LineWidth',1.5); 
% legend('True dx/dt','Noisy dx/dt',['TVDiff (alpha = ' num2str(alpha(I)) ')'])
% xlabel('Time t'),ylabel('dx/dt')
% 
% subplot(3,1,3)
% semilogx(alpha,RMSE,'-s','LineWidth',1.5,'MarkerSize',2)
% xlabel('\alpha','FontSize',12)
% ylabel('RMSE','FontSize',12)
%% alpha sensitivity for different noise level
% eta = 0:0.1:5;
% dim = 3;
% rng(1)
% for k = 1:length(eta)
%     noise_level = eta(k);
%     noisy_x = x + noise_level*randn(size(x,1),size(x,2));
%     level = 5;
%     idx = (1:0.1:(level+1))-4;
%     alpha = 10.^(idx); % Regularization parameter
%     N = length(alpha);
%     TVDiff_dx = zeros(length(alpha),size(x,1)+1);
%     for i = 1:N
%         TVDiff_dx(i,:) = TVRegDiff(noisy_x(:,dim), 3, alpha(i), [], 'small', 1e-12, 0.01, 0, 0);
%         RMSE(i) = sqrt(mean((TVDiff_dx(i,1:end-1)'-ds_true(1:end,dim)).^2));
%     end
%     % Find the optimal value
%     [M,I] = min(RMSE);
%     RMSE_opt(k) = M;
%     alpha_opt(k) = alpha(I);
% end
% subplot(2,1,1)
% plot(eta,alpha_opt,'LineWidth',1.5)
% xlabel('\eta'),ylabel('Optimal \alpha')
% grid on
% 
% subplot(2,1,2)
% plot(eta,RMSE_opt,'LineWidth',1.5)
% xlabel('\eta'),ylabel('Min RMSE')
% grid on
%% Epsilon sensitivity
% idx = (1:0.1:10)-11;
% ep = 10.^(idx); % Regularization parameter
% N = length(ep);
% % alpha = 0.025;
% alpha = 0.12589;
% TVDiff_dx = zeros(N,size(x,1)+1);
% for i = 1:N
%     TVDiff_dx(i,:) = TVRegDiff(noisy_x(:,1), 3, alpha, [], 'small', ep(i), 0.01, 0, 0);
%     RMSE(i) = sqrt(mean((TVDiff_dx(i,1:end-1)'-ds_true(:,1)).^2));
% end
% % Validate estimated derivative
% figure,
% subplot(3,1,1)
% plot(x(:,1),'-','LineWidth',1.5)
% hold on
% plot(noisy_x(:,1),'LineWidth',0.5)
% title(['\eta = ' num2str(noise_level)])
% legend('True x','Noisy x');
% xlabel('Time t','FontSize',12)
% ylabel('x','FontSize',12)
% % Find the optimal value
% [M,I] = min(RMSE);
% subplot(3,1,2)
% plot(ds_true(:,1),'LineWidth',1.5);
% hold on
% plot(ds_noisy(:,1),'--','LineWidth',0.5);
% plot(TVDiff_dx(I,1:end-1),'-','LineWidth',1.5); 
% legend('True dx/dt','Noisy dx/dt',['TVDiff (ep = ' num2str(ep(I)) ')'])
% xlabel('Time t'),ylabel('dx/dt')
% 
% subplot(3,1,3)
% semilogx(ep,RMSE,'-s','LineWidth',1.5,'MarkerSize',2)
% xlabel('\ep','FontSize',12)
% ylabel('RMSE','FontSize',12)
%% dx sensitivity
% idx = (1:0.1:5)-6;
% dx = 10.^(idx); % Regularization parameter
% N = length(dx);
% alpha = 0.025;
% % alpha = 0.12589;
% TVDiff_dx = zeros(N,size(x,1)+1);
% for i = 1:N
%     TVDiff_dx(i,:) = TVRegDiff(noisy_x(:,1), 3, alpha, [], 'small',  1e-6, dx(i), 0, 0);
%     RMSE(i) = sqrt(mean((TVDiff_dx(i,1:end-1)'-ds_true(:,1)).^2));
% end
% % Validate estimated derivative
% figure,
% subplot(3,1,1)
% plot(x(:,1),'-','LineWidth',1.5)
% hold on
% plot(noisy_x(:,1),'LineWidth',0.5)
% title(['\eta = ' num2str(noise_level)])
% legend('True x','Noisy x');
% xlabel('Time t','FontSize',12)
% ylabel('x','FontSize',12)
% % Find the optimal value
% [M,I] = min(RMSE);
% subplot(3,1,2)
% plot(ds_true(:,1),'LineWidth',1.5);
% hold on
% plot(ds_noisy(:,1),'--','LineWidth',0.5);
% plot(TVDiff_dx(I,1:end-1),'-','LineWidth',1.5); 
% legend('True dx/dt','Noisy dx/dt',['TVDiff (dx = ' num2str(dx(I)) ')'])
% xlabel('Time t'),ylabel('dx/dt')
% 
% subplot(3,1,3)
% semilogx(dx,RMSE,'-s','LineWidth',1.5,'MarkerSize',2)
% xlabel('dx','FontSize',12)
% ylabel('RMSE','FontSize',12)
%% alpha sensitivity for different noise level
eta = 0.5:0.1:5;
dim = 2;
wind = 10:10:500;
rng(1)
for k = 1:length(eta)
    for w = 1:length(wind)
        noise_level = eta(k);
        noisy_x = x + noise_level*randn(size(x,1),size(x,2));
        if dim == 1
            alpha = 0.024*eta(k)^2+0.057*eta(k)-0.0062;
        elseif dim == 2
            alpha = 0.009088*eta(k)^2+0.04166*eta(k)+0.006757;
        else
            alpha = 0.009791*eta(k)^2+0.05758*eta(k)-0.01469;
        end
        start_idx = 1;
        end_idx = start_idx + wind(w)-1;
        count = 0;
        RMSE = [];
        while end_idx <= size(x,1)
            count = count + 1;
            TVDiff_dx = TVRegDiff(noisy_x(start_idx:end_idx,dim), 3, alpha, [], 'small', 1e-12, 0.01, 0, 0);
            RMSE(w,count) = sqrt(mean((TVDiff_dx(1:end-1)-ds_true(start_idx:end_idx,dim)).^2));
            start_idx = start_idx + wind(w);
            end_idx = end_idx + wind(w);
        end
        RMSE_all(w) = sum(RMSE(w,:));
    end
    % Find the optimal value
    [M,I] = min(RMSE_all);
    RMSE_opt(k) = M;
    wind_opt(k) = wind(I);
end
subplot(2,1,1)
plot(eta,wind_opt,'LineWidth',1.5)
xlabel('\eta'),ylabel('Optimal window size')
grid on

subplot(2,1,2)
plot(eta,RMSE_opt,'LineWidth',1.5)
xlabel('\eta'),ylabel('Min RMSE')
grid on